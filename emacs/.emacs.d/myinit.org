#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Global Interface Tweaks
Get rid of menu and toolbar etc...
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(global-whitespace-mode 1)
(global-hl-line-mode 1)
(global-prettify-symbols-mode 1)
#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :custom (evil-collection-setup-minibuffer t)
  :init (evil-collection-init))
(use-package magit :ensure t)
(use-package which-key
  :ensure t
  :config (which-key-mode))
(use-package diminish :ensure t)
(use-package helm
  :ensure t
  :config
    (require 'helm-config)
    (helm-mode 1))
(use-package color-theme-sanityinc-tomorrow :ensure t)
(use-package powerline-evil :ensure t)
(use-package powerline
  :ensure t
  :config (powerline-evil-center-color-theme))
(use-package all-the-icons :ensure t)
(use-package neotree
  :ensure t
  :config (global-set-key [f8] 'neotree-toggle))
(use-package org
  :ensure t
  :mode ("\\.org\\'" . org-mode))

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

(global-undo-tree-mode)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))

(require 'whitespace)
(setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))
(setq whitespace-display-mappings
  ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
  '(
    (space-mark 32 [183] [46]) ; 32 SPACE 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
    (newline-mark 10 [172 10]) ; 10 LINE FEED
    (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
    ))

(global-linum-mode t)
(eval-after-load 'linum
  '(progn
     (defface linum-leading-zero
       `((t :inherit 'linum
            :foreground ,(face-attribute 'linum :background nil t)))
       "Face for displaying leading zeroes for line numbers in display margin."
       :group 'linum)

     (add-hook 'linum-before-numbering-hook
           (lambda ()
             (setq-local linum-format-width (length (number-to-string
                 (count-lines (point-min) (point-max)))))))
     
     (defun linum-format-func (line)
         (concat
        (propertize (make-string (- linum-format-width (length (number-to-string line))) ?0)
                      'face 'linum-leading-zero)
          (propertize (number-to-string line) 'face 'linum)))
      (setq linum-format 'linum-format-func)))

(use-package auto-complete 
  :ensure t
  :init
    (ac-config-default)
    (global-auto-complete-mode t))


#+END_SRC
