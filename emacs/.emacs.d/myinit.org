#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Global Tweaks
Get rid of menu and toolbar etc...
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(display-time-mode 1)
(global-display-line-numbers-mode 1)
(global-whitespace-mode 1)
(global-hl-line-mode 1)
(global-prettify-symbols-mode 1)
(setq sentence-end-double-space nil)
(fset 'yes-or-no-p 'y-or-n-p)
(setq vc-follow-symlinks t)
(setq initial-scratch-message ";;Welcome to Emacs") 
#+end_src 
** Whitespace mode 
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))
  (setq whitespace-display-mappings
    ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
    '(
      (space-mark 32 [183] [46]) ; 32 SPACE 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
      (newline-mark 10 [172 10]) ; 10 LINE FEED
      (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
      ))


#+end_src
** Tabs and indents
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

#+end_src 
** Recent files 
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq-default recent-save-file "~/.emacs.d/recentf")
#+end_src 
* Keybindings
#+BEGIN_SRC emacs-lisp
(use-package general
    :ensure t
    :config
       (general-define-key
           :states '(normal visual insert emacs)
           :prefix "SPC"
           :non-normal-prefix "M-SPC"
               "TAB" '(switch-to-prev-buffer :which-key "prev buffer")
               "<backtab>" '(switch-to-next-buffer :which-key "next buffer")
               "/" '(helm-ag :which-key "project search (ag)")
               ":" '(helm-M-x :which-key "helm-M-x")
               "t" '(treemacs :which-key "toggle treemacs")
               "G" '(magit-status :which-key "magit")
               "g" '(hydra-git-gutter/body :which-key "git gutter")
               "b" '(helm-mini :which-key "helm mini")
               "p" '(projectile-command-map :which-key "projectile")
               "a" '(:ignore t :which-key "Applications")
               "ar" 'ranger
               "ac" 'calc
               "c" 'org-capture
))  
(use-package hydra :ensure t)
#+end_src 
* Evil Mode 
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; this is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :custom (evil-collection-setup-minibuffer t)
  :init (evil-collection-init))
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src 

* Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    (setq helm-display-header-line nil)
    (set-face-attribute 'helm-source-header nil :height 1.0)
    (helm-autoresize-mode 1)
    (setq helm-autoresize-max-height 30)
    (setq helm-autoresize-min-height 30)
    ;; (setq helm-split-window-in-side-p t)
    (helm-mode 1))

  (use-package helm-ag :ensure t)
  (use-package helm-company :ensure t)t
  (use-package helm-descbinds :ensure t)
#+END_SRC
* Projectile 
#+begin_src emacs-lisp
(use-package projectile
    :ensure t
    :config (projectile-mode +1))
(use-package helm-projectile
    :ensure t
    :config (helm-projectile-on))
    
#+END_SRC
* Treemacs 
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        nil
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      nil 
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      (treemacs-resize-icons 16)
      (set-face-attribute 'treemacs-root-face nil :height 1.0 :underline nil)
      (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-use)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+end_src 
* Ranger 
#+BEGIN_SRC emacs-lisp
(use-package ranger :ensure t) 
#+END_SRC
* Org 
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :mode ("\\.org\\'" . org-mode)
    :config 
        (setq org-directory  "~/Dropbox (Cognifide)/org/")
        (setq org-agenda-files  '("~/Dropbox (Cognifide)/org/"))
        (setq org-default-notes-file "~/Dropbox (Cognifide)/org/inbox.org")
        (add-hook 'org-capture-mode-hook (lambda() 
            (evil-insert-state)
            (setq-local header-line-format nil)
            ))
         (add-to-list 'org-modules 'org-protocol)
         (setq org-capture-templates '(
             ("t" "Todo" entry (file+headline "" "Tasks")
             "* TODO %?\n%U" :empty-lines 1)
             ("T" "Todo with Clipboard" entry (file+headline "" "Tasks")
             "* TODO %?\n%U\n   %c" :empty-lines 1)
             ("i" "Idea" entry (file+headline "" "Ideas")
             "* %?\n%U" :empty-lines 1)
             ("I" "Idea with Clipboard" entry (file+headline "" "Ideas")
             "* %?\n%U\n   %c" :empty-lines 1)))

        (defvar my-org-capture-before-config nil
        "Window configuration before `org-capture'.")

        (defadvice org-capture (before save-config activate)
        "Save the window configuration before `org-capture'."
        (setq my-org-capture-before-config (current-window-configuration)))

        (add-hook 'org-capture-mode-hook 'delete-other-windows)
        (defun my-org-capture-cleanup ()
        "Clean up the frame created while capturing via org-protocol."
        ;; In case we run capture from emacs itself and not an external app,
        ;; we want to restore the old window config
        (when my-org-capture-before-config
            (set-window-configuration my-org-capture-before-config))
        (-when-let ((&alist 'name name) (frame-parameters))
            (when (equal name "org-protocol-capture")
            (delete-frame))))

        (add-hook 'org-capture-after-finalize-hook 'my-org-capture-cleanup)
        
        (setq org-refile-targets '((nil :maxlevel . 1)
                                        (org-agenda-files :maxlevel . 1)))
        (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
        (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
  )

  (use-package org-protocol 
    :after org
    :init (server-start)
    :config
        (add-to-list 'org-capture-templates
               '("L" "Web link with selection" entry (file+headline "" "Links")
                 "* %?[[%:link][%:description]] %U\n%i\n" :immediate-finish t :empty-lines 1))
        (add-to-list 'org-capture-templates
               '("l" "Web link" entry (file+headline "" "Links")
                 "* %?[[%:link][%:description]] %U\n" :immediate-finish t :empty-lines 1)))
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
  
#+END_SRC

* General Programming Stuff
** Comments 
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary 
  :ensure t
  :config (evil-commentary-mode)
)
#+end_src 
** AutoComplete 
#+BEGIN_SRC emacs-lisp
(use-package company               
  :ensure t
  :init (global-company-mode)
  :diminish company-mode)
  
#+end_src 
** FlyCheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck               
  :ensure t
  :config
    (setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(javascript-jshint json-jsonlist)))
    (add-hook 'after-init-hook #'global-flycheck-mode)
)
 
#+end_src 

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t :after evil)
(use-package evil-magit 
   :ensure t) 
#+end_src 
** GitGutter 
#+BEGIN_SRC emacs-lisp
(use-package git-gutter 
    :ensure t 
    :config (global-git-gutter-mode +1))
(defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                            :hint nil)
  "
Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
  ("j" git-gutter:next-hunk)
  ("k" git-gutter:previous-hunk)
  ("h" (progn (goto-char (point-min))
              (git-gutter:next-hunk 1)))
  ("l" (progn (goto-char (point-min))
              (git-gutter:previous-hunk 1)))
  ("s" git-gutter:stage-hunk)
  ("r" git-gutter:revert-hunk)
  ("p" git-gutter:popup-hunk)
  ("R" git-gutter:set-start-revision)
  ("q" nil :color blue)
  ("Q" (progn (git-gutter-mode -1)
              ;; git-gutter-fringe doesn't seem to
              ;; clear the markup right away
              (sit-for 0.1)
              (git-gutter:clear))
       :color blue))
#+end_src 
* Web
#+BEGIN_SRC emacs-lisp

(use-package add-node-modules-path
    :ensure t
    :config (add-hook 'flycheck-mode-hook 'add-node-modules-path)
            (add-hook 'prettier-mode-hook 'add-node-modules-path)

)
(use-package web-mode
  :ensure t
  :bind (("C-c ]" . emmet-next-edit-point)
         ("C-c [" . emmet-prev-edit-point)
         ("C-c o b" . browse-url-of-file))
  :mode
  (("\\.js\\'" . web-mode)
   ("\\.html?\\'" . web-mode)
   ("\\.phtml?\\'" . web-mode)
   ("\\.tpl\\.php\\'" . web-mode)
   ("\\.[agj]sp\\'" . web-mode)
   ("\\.as[cp]x\\'" . web-mode)
   ("\\.erb\\'" . web-mode)
   ("\\.mustache\\'" . web-mode)
   ("\\.djhtml\\'" . web-mode)
   ("\\.jsx$" . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2)
        
(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))

  ;; highlight enclosing tags of the element under cursor
  (setq web-mode-enable-current-element-highlight t)

  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
      ad-do-it))
      
  (add-hook 'web-mode-hook 'add-node-modules-path)
  (flycheck-add-mode 'javascript-eslint 'web-mode)

    
  ;; editing enhancements for web-mode
  ;; https://github.com/jtkDvlp/web-mode-edit-element
  (use-package web-mode-edit-element
    :ensure t
    :config (add-hook 'web-mode-hook 'web-mode-edit-element-minor-mode))

  ;; snippets for HTML
  ;; https://github.com/smihica/emmet-mode
  (use-package emmet-mode
    :ensure t
    :init (setq emmet-move-cursor-between-quotes t) ;; default nil
    :diminish (emmet-mode . " e"))
  (add-hook 'web-mode-hook 'emmet-mode)

  (defun my-web-mode-hook ()
    "Hook for `web-mode' config for company-backends."
    (set (make-local-variable 'company-backends)
         '((company-tern company-css company-web-html company-files))))
  (add-hook 'web-mode-hook 'my-web-mode-hook)

  ;; Enable JavaScript completion between <script>...</script> etc.
  (defadvice company-tern (before web-mode-set-up-ac-sources activate)
    "Set `tern-mode' based on current language before running company-tern."
    (message "advice")
    (if (equal major-mode 'web-mode)
	(let ((web-mode-cur-language
	       (web-mode-language-at-pos)))
	  (if (or (string= web-mode-cur-language "javascript")
		  (string= web-mode-cur-language "jsx"))
	      (unless tern-mode (tern-mode))
	    (if tern-mode (tern-mode -1))))))
  (add-hook 'web-mode-hook 'company-mode)

  ;; to get completion data for angularJS
  (use-package ac-html-angular :defer t :ensure t)
  ;; to get completion for twitter bootstrap
  (use-package ac-html-bootstrap :defer t :ensure t)

  ;; to get completion for HTML stuff
  ;; https://github.com/osv/company-web
  (use-package company-web
    :ensure t)

  (add-hook 'web-mode-hook 'company-mode))

;; configure CSS mode company backends
(use-package css-mode 
  :ensure t
  :config
  (defun my-css-mode-hook ()
    (set (make-local-variable 'company-backends)
         '((company-css company-dabbrev-code company-files))))
  (add-hook 'css-mode-hook 'my-css-mode-hook)
  (add-hook 'css-mode-hook 'company-mode))

;; impatient mode - Live refresh of web pages
;; https://github.com/skeeto/impatient-mode
(use-package impatient-mode 
  :ensure t
  :diminish (impatient-mode . " i")
  :commands (impatient-mode))
#+END_SRC
* JavaScript
#+BEGIN_SRC emacs-lisp
;; js2-mode
;; https://github.com/mooz/js2-mode
(use-package js2-mode
  :ensure t
  :bind (:map js2-mode-map
              (("C-x C-e" . js-send-last-sexp)
               ("C-M-x" . js-send-last-sexp-and-go)
               ("C-c C-b" . js-send-buffer-and-go)
               ("C-c C-l" . js-load-file-and-go)))
  :mode
    ;("\\.js$" . js2-mode)
    ;("\\.json$" . js2-jsx-mode)
  :config
    (custom-set-variables '(js2-strict-inconsistent-return-warning nil))
    (custom-set-variables '(js2-strict-missing-semi-warning nil))
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

    (setq js-indent-level 2)
    (setq js2-indent-level 2)
    (setq js2-basic-offset 2)
)

(use-package rjsx-mode
    :ensure t
    :mode
    ;("\\.js$" . rjsx-mode)
) 

(use-package company-tern
    :ensure t)
(use-package tern
  :ensure t
  :config
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'js2-mode-hook (lambda ()
                           (tern-mode)
                           (company-mode))))

  ;; Run a JavaScript interpreter in an inferior process window
  ;; https://github.com/redguardtoo/js-comint
  (use-package js-comint
    :ensure t
    :config
    (setq inferior-js-program-command "node"))

  ;; js2-refactor :- refactoring options for emacs
  ;; https://github.com/magnars/js2-refactor.el
  (use-package js2-refactor 
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c j r")
  (add-hook 'js2-mode-hook 'js2-refactor-mode))


  (use-package xref-js2
    :ensure t
    :config
    (add-hook 'js2-mode-hook (lambda ()
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
    

  (use-package prettier-js
    :ensure t
    :config 
        (defun web-mode-init-prettier-hook ()
            (add-node-modules-path)
            (prettier-js-mode))

        (add-hook 'web-mode-hook  'web-mode-init-prettier-hook)
        (add-hook 'js2-mode-hook  'web-mode-init-prettier-hook))
#+END_SRC
* other
#+begin_src emacs-lisp
  (use-package rainbow-delimiters :ensure t)
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  (use-package diminish :ensure t)
  (use-package color-theme-sanityinc-tomorrow :ensure t)
  (use-package powerline-evil :ensure t)
  (use-package powerline
    :ensure t
    :config (powerline-evil-center-color-theme))
  (use-package all-the-icons :ensure t)
  (use-package neotree
    :ensure t
    :config (global-set-key [f8] 'neotree-toggle))

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))

  (global-undo-tree-mode)
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))

    (use-package notmuch 
        :ensure t)


#+END_SRC
